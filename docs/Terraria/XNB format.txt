// XNA 4.0 (XNB file)
// NOTE: This format is incomplete and unverified
// pseudocode to cut corners

struct string
{
  BYTE bCharCount;
  char text[bCharCount];
};

//XNB Header
{
  char    magic[3]; // constant {'X','N','A'}
  u8      platform;  // ? 'w' for windows??
  u16     gfxStorage;  // graphicsProfile = (( gfxStorage & 0x7F00) >> 8)  // unused?
                       // compression = ( gfxStorage & 0x80FF) // 5 = uncompressed; 0x8005 = compressed
  u32     baseFileSize;
  { // only if compressed
    u32 decompressedSize;
    // (Decompress using imported XNA DLL functions; CreateDecompressionContext, Decompress, and DestroyDecompressionContext)
  }
}

//Content (may be inaccurate)
{
  u8          unknown;
  u8          manifestStrSize;
  u8          unknown;
  char        manifest[manifestStrSize];
  u8          wtf[6];
  // actual content
  { // Texture2D
    u32 surfaceFormat; // 0 = RGBA?
    u32 width;
    u32 height;
    u32 count;  // frames???
    u32 size;   // data size
  }  
}



int decodeInt(BYTE *data) // This is referenced/used but the data doesn't follow
{
  int rval = 0, bitShift = 0;
  do
  {
    if ( bitShift == 7 * 5 )
    {
      // throw some exception
    }
    BYTE bCurrent = *(data++);
    rval |= (bCurrent & 0x7F) << bitShift;
    bitShift += 7;
  } while ( !(bCurrent & 0x80) );
  return rval;
};
