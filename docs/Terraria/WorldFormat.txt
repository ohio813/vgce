// some pseudocode; for ver 1.0.4
// bool = 1 BYTE

// =================== BASIC TYPES ===============================
struct point
{
  int x;
  int y;
};

struct string
{
  encodedInt  sizeofString; // encoded int, see below
  char        szString[sizeofString]; // pseudocode to show how it is read
};

int decodeInt(BYTE *data) // This is referenced/used but the data doesn't follow
{
  int rval = 0, bitShift = 0;
  do
  {
    if ( bitShift == 7 * 5 )
    {
      // throw some exception
    }
    BYTE bCurrent = *(data++);
    rval |= (bCurrent & 0x7F) << bitShift;
    bitShift += 7;
  } while ( (bCurrent & 0x80) );
  return rval;
};

// =================== DATA ===============================
bool isTileFrameImportant[] = {
  0, 0, 0, 1, 0, 1, 0, 0,
  0, 0, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 0, 1, 1, 0, 0,
  1, 0, 1, 1, 1, 1, 0, 1,
  0, 1, 1, 1, 1, 0, 0, 0,
  0, 0, 1, 0, 0, 0, 0, 0,
  0, 0, 1, 0, 0, 0, 0, 1,
  0, 0, 0, 0, 0, 1, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 1,
  1, 1, 1, 0, 0, 1, 1, 1
};

// =================== WORLD TYPES ===============================
struct TILE
{
  bool isActive;
  { // only if isActive is true
    char  cTileType;
    { // only if isTileFrameImportant[cTileType] is true
      short frameX;
      short frameY;
    }
  }
  bool  isLighted;

  bool  hasWall;
  { // only if hasWall is true
    char cWallType;
  }

  bool hasLiquid;
  { // only if hasLiquid is true
    char cLiquidType;
    bool isLava;
  }
};

struct CHEST
{
  bool isActive;
  { // only if isActive is true
    point   position;
    struct ITEM
    {
      char cStackCount;
      { // only if the stack is greater than 0
        string itemName;
      }
    } items[20];
  } isActive;
};

struct SIGN
{
  bool isActive;
  { // only if isActive is true
    string  text;
    point   position;    
  }
};

struct NPC
{
  bool isActive;
  { // only if isActive is true
    string  npcName;
    float   positionX;
    float   positionY;
    bool    isHomeless;
    point   homeTile;
  }
};

// =================== WORLD FORMAT ===============================
struct WORLD
{
  int     iVersion;        // 4 = 1.0.3; 9 = 1.0.4
  string  worldName;
  int     iWorldID;
  int     iBoundsLeft;      // pixels
  int     iBoundsRight;     // pixels
  int     iBoundsTop;       // pixels
  int     iBoundsBottom;    // pixels
  point   worldSize;        // tiles
  point   spawnPosition;    // tiles
  double  worldSurface;
  double  rockLayer;
  double  worldTime;
  bool    isDayTime;
  int     iBloodMoonPhase;
  bool    isBloodMoon;
  point   dungeonLocation;    // tiles
  bool    isBossDefeated[3];
  bool    isShadowOrbSmashed;
  bool    spawnMeteor;
  char    cShadowOrbCount;
  int     iInvasionDelay;
  int     iInvasionSize;
  int     iInvasionType;
  double  invasionCurrentX;
  TILE    mapTiles[worldSize.y][worldSize.x];
  CHEST   treasureChests[1000];
  SIGN    signs[1000];
  NPC     npcList[];  // size is variable; until it reaches the first inactive entry
  { // after ver 7
    bool    worldValid;
    string  worldNameCheck;
    int     worldIDCheck;
  }
};

