#summary Storm.dll Functions and their Ordinals
Note: Some name assignments may not be accurate, or may be out-dated. This is for the Starcraft: Broodwar version of storm.dll. If there are any corrections to be made, please post a comment.

{{{
100                       SNetInit()    // guess
101    BOOL     __stdcall SNetCreateGame(char *Source, char *a2, char *a3, int a4, int a5, int a6, char *a7, char *a8, int *playerid)
102    BOOL     __cdecl   SNetDestroy()
103    BOOL     __stdcall SNetEnumDevices(int (__stdcall *callback)(DWORD, DWORD, DWORD, DWORD), int mincaps)
104    BOOL     __stdcall SNetEnumGames(int (__stdcall *callback)(DWORD, DWORD, DWORD), int *hintnextcall)
105    BOOL     __stdcall SNetEnumProviders(int (__stdcall *callback)(DWORD, DWORD, DWORD))
106    BOOL     __stdcall SNetDropPlayer(int playerid, DWORD flags)
107    BOOL     __stdcall SNetGetGameInfo(int type, char *src, unsigned int length, int *byteswritten)
108    BOOL     __stdcall SNetGetNetworkLatency(int measurementtype, int *result)
109    BOOL     __stdcall SNetGetNumPlayers(int *firstplayerid, int *lastplayerid, int *activeplayers)
110    BOOL     __stdcall SNetGetOwnerTurnsWaiting(int *turns)
111    BOOL     __stdcall SNetGetPerformanceData(int counterid, int *countervalue, int *countertype, int *counterscale, LPFILETIME *measurementtime, int *measurementfreq)
112    BOOL     __stdcall SNetGetPlayerCaps(char playerid, int *caps)
113    BOOL     __stdcall SNetGetPlayerName(int playerid, char *buffer, size_t buffersize)
114    BOOL     __stdcall SNetGetProviderCaps(char *caps)
115    BOOL     __stdcall SNetGetTurnsInTransit(int *turns)
116    BOOL     __stdcall SNetInitializeDevice(int a1, int a2, int a3, int a4, int *a5)
117    BOOL     __stdcall SNetInitializeProvider(DWORD providerName, int *providerData, int *userData, int *a4, int *a5) // contains verbyte in providerData
118    BOOL     __stdcall SNetJoinGame(unsigned int a1, char *gameName, char *gamePassword, char *playerName, char *userStats, int *playerid)
119    BOOL     __stdcall SNetLeaveGame(int type)
120    BOOL     __stdcall SNetPerformUpgrade(DWORD *upgradestatus)
121    BOOL     __stdcall SNetReceiveMessage(int *senderplayerid, BYTE **data, int *databytes)
122    BOOL     __stdcall SNetReceiveTurns(int a1, int arraysize, char **arraydata, unsigned int *arraydatabytes, DWORD *arrayplayerstatus)  // arraysize = player count
123    HANDLE   __stdcall SNetRegisterEventHandler(int type, int event)
124    BOOL     __cdecl   SNetResetLatencyMeasurements()
125    int      __stdcall SNetSelectGame(int a1, int a2, int a3, int a4, int a5, int *playerid)  // a2 is a buffer containing the verbyte
126    BOOL     __stdcall SNetSelectProvider(LPARAM lparam, int a2, int a3, int a4, int a5, int *providerid)
127    BOOL     __stdcall SNetSendMessage(unsigned int playerID, char *data, unsigned int databytes)
128    BOOL     __stdcall SNetSendTurn(char *data, unsigned int databytes)
129    BOOL     __stdcall SNetSetBasePlayer(unsigned int a1)
130    BOOL     __stdcall SNetSetGameMode(DWORD modeFlags, char a2)
131    BOOL     __stdcall SNetUnregisterEventHandler(unsigned int a1, char *callback)

133    BOOL     __stdcall SNetEnumGamesEx(int a1, int a2, int (__fastcall *callback)(DWORD, DWORD, DWORD), int *hintnextcall)
134    int      __stdcall SNetSendServerChatCommand(const char *command)
135    BOOL     __stdcall SNetSend135(signed int playerID, const char *buffer, unsigned int length) // special case for playerID -1 and -2
136    BOOL     __stdcall SNetReceive136(int a1, int a2, int a3)
137    BOOL     __stdcall SNet137(DWORD flags)   // this can't be SNetGetPlayerNames
138    BOOL     __stdcall SNetCreateLadderGame(char *gameName, char *gamePassword, char *gameDataString, DWORD gameType, int a5, int a6, char *GameTemplateData, int GameTemplateSize, int playerCount, char *playerName, char *a11, int *playerID)
139    BOOL     __stdcall SNetReportGameResult(unsigned int a1, int size, int a3, int a4, int a5)
140    BOOL     __stdcall SNetCheckDataFile(int a1, int a2, int a3, int a4)
141    int      __stdcall SNetSendLeagueCommand(char *cmd, char *callback)
142    int      __stdcall SNetSendReplayPath(int a1, int a2, char *replayPath)
143    int      __stdcall SNetGetLeagueName(int leagueID)                   // not official name
144    BOOL     __stdcall SNet144(char *buffer)
145    int      __stdcall SNetLeagueLogout(char *bnetName)
146    int      __stdcall SNetGetLeaguePlayerName(int *curPlayerID, size_t nameSize)        // not official name

150    void     __cdecl   Ordinal150()
151    BOOL     __stdcall Ordinal151(int a1, int a2)  // WC3

200                       SDlgInit()
201    HDC      __stdcall SDlgBeginPaint(HWND window, LPPAINTSTRUCT ps)
202    BOOL     __stdcall SDlgBltToWindowI(HWND window, HRGN hrgnSrc2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
203    BOOL     __cdecl   SDlgCheckTimers()
204    HWND     __stdcall SDlgCreateDialogIndirectParam(HMODULE hModule, LPCSTR lpName, HWND hWndParent, LPVOID lpParam)
205    HWND     __stdcall SDlgCreateDialogParam(HMODULE hModule, LPCSTR lpName, HWND hWndParent, LPVOID lpParam)
206    HGDIOBJ  __stdcall SDlgDefDialogProc(HWND hDlg, signed int DlgType, HDC textLabel, HWND hWnd)
207                       SDlgDestroy()
208    HANDLE   __stdcall SDlgDialogBoxIndirectParam(HMODULE hModule, LPCSTR lpName, HWND hWndParent, LPVOID lpParam, LPARAM lParam)
209    HANDLE   __stdcall SDlgDialogBoxParam(HMODULE hModule, LPCSTR lpName, HWND hWndParent, LPVOID lpParam, LPARAM lParam)
210    BOOL     __stdcall SDlgDrawBitmap(HWND window, HGDIOBJ a2, HRGN hrgnSrc2, int a4, int a5, int a6, char a7)
211    BOOL     __stdcall SDlgEndDialog(HWND hDlg, HANDLE nResult)
212    BOOL     __stdcall SDlgEndPaint(HWND hWnd, PAINTSTRUCT *lpPaint)
213    BOOL     __stdcall SDlgKillTimer(HWND hDlg, int state)
214    BOOL     __stdcall SDlgSetBaseFont(int a1, int a2, int a3, int a4, char *Source)
215    BOOL     __stdcall SDlgSetBitmapI(HWND hWnd, int a2, char *Str2, int mask1, int flags, int a6, int a7, int a8, int a9, int mask2)
216    BOOL     __stdcall SDlgSetControlBitmaps(HWND parentwindow, int *id, int a3, char *buffer2, char *buffer, int flags, int mask)
217    BOOL     __stdcall SDlgSetCursor(HWND hWnd, LONG dwNewLong, int a3, int a4)
218    BOOL     __stdcall SDlgSetSystemCursor(int a1, int a2, int a3, signed int a4)
219    int      __stdcall SDlgSetTimer(HWND hDlg, int state, int time, int a4)
220    BOOL     __cdecl   SDlgUpdateCursor()
221    BOOL     __stdcall SDlgBltToWindowE(HWND hWnd, HRGN a2, char *a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
222    BOOL     __stdcall SDlgSetBitmapE(HWND hWnd, int a2, char *src, int mask1, int flags, int a6, int a7, int width, int a9, int mask2)
223    char*    __stdcall SDlgSetLocale(int category, const char *locale)
224    int      __stdcall Ordinal224(int a1)    // BNET/League related

250                       SFileInit()
251    BOOL     __stdcall SFileAuthenticateArchive(HANDLE hArchive, DWORD *dwResult)     // (signature) file in archive
252    BOOL     __stdcall SFileCloseArchive(HANDLE hArchive)
253    BOOL     __stdcall SFileCloseFile(HANDLE hFile)
254    BOOL     __stdcall SFileDdaBegin(HANDLE directsound, int a2, int a3)
255    BOOL     __stdcall SFileDdaBeginEx(HANDLE directsound, DWORD flags, DWORD mask, unsigned __int32 lDistanceToMove, signed __int32 volume, signed int a6, int a7)
256    BOOL     __cdecl   SFileDdaDestroy()
257    BOOL     __stdcall SFileDdaEnd(HANDLE directsound)
258    BOOL     __stdcall SFileDdaGetPos(HANDLE directsound, int a2, int a3)
259    BOOL     __stdcall SFileDdaGetVolume(HANDLE directsound, int a2, int a3)
260    BOOL     __stdcall SFileDdaInitialize(HANDLE directsound)
261    BOOL     __stdcall SFileDdaSetVolume(HANDLE directsound, signed int bigvolume, signed int volume)
262    BOOL     __cdecl   SFileDestroy()
263    BOOL     __stdcall SFileEnableDirectAccess(BOOL access)
264    BOOL     __stdcall SFileGetFileArchive(HANDLE hFile, HANDLE archive)
265    LONG     __stdcall SFileGetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
266    BOOL     __stdcall SFileOpenArchive(char *archivename, DWORD dwPriority, DWORD dwFlags, HANDLE handle)
267    BOOL     __stdcall SFileOpenFile(char *filename, HANDLE handle)
268    BOOL     __stdcall SFileOpenFileEx(HANDLE hMpq, const char *szFileName, DWORD dwSearchScope, HANDLE *phFile)
269    BOOL     __stdcall SFileReadFile(HANDLE hFile, void *buffer, DWORD nNumberOfBytesToRead, int *read, LONG lpDistanceToMoveHigh)
270    BOOL     __stdcall SFileSetBasePath(char *path)
271    LONG     __stdcall SFileSetFilePointer(HANDLE hFile, LONG filePos, LONG *filePosHigh, DWORD dwMethod)
272    void     __stdcall SFileSetLocale(LCID lcLocale)
273    BOOL     __stdcall SFileGetBasePath(char *result, int maxSize)
274    BOOL     __stdcall SFileSetIoErrorMode(int mode, void *callback)
275    BOOL     __stdcall SFileGetArchiveName(HANDLE hArchive, char *name, int length)
276    BOOL     __stdcall SFileGetFileName(HANDLE hFile, char *buffer, int length)
277    BOOL     __stdcall SFileGetArchiveInfo(int a1, int a2, int a3)
278    char     __stdcall SFileSetPlatform(char a1)
279    BOOL     __stdcall SFileLoadFile(char *filename, void *buffer, int buffersize, int a4, int a5)
280    BOOL     __stdcall SFileUnloadFile(HANDLE hFile)
281    BOOL     __stdcall SFileLoadFileEx(void *hArchive, char *filename, int a3, int a4, int a5, DWORD searchScope, struct _OVERLAPPED *lpOverlapped)
282    void     __stdcall SFilePrioritizeRequest(int a1, int a2)
283    void     __stdcall SFileCancelRequest(int a1)
284    int      __stdcall SFileSetAsyncBudget(DWORD dwBudget)
285    void     __stdcall SFileSetDataChunkSize(DWORD dwSize)
286    int      __stdcall SFileEnableSeekOptimization(int a1)
287    BOOL     __stdcall SFileReadFileEx(int a1, int a2, int a3, int a4, PLONG lpDistanceToMoveHigh, int a6)
288    DWORD    __stdcall SFileFileExists(HANDLE hFile)
289    DWORD    __stdcall SFileFileExistsEx(HANDLE hFile, void *buffer, DWORD nNumberOfBytesToRead, int *read, LONG lpDistanceToMoveHigh, int a6, int a7);
290    BOOL     __stdcall SFileReadFileEx2(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
291    BOOL     __stdcall SFileReadFile2(int a1, void *a2, size_t a3, int a4, int a5, int a6, int a7)
292    BOOL     __stdcall SFileLoadFile2(int a1, int a2, int a3, int a4, size_t a5, int a6, int a7, int a8)
293    BOOL     __stdcall SFileOpenFileAsArchive(int a1, char *a2, int a3, int a4, int a5)
294    LCID     __cdecl   SFileGetLocale()
295    int      __stdcall SFileRegisterLoadNotifyProc(int a1, int a2)
296    int      __stdcall SFileGetFileCompressedSize(int a1, int a2)
297    BOOL     __stdcall Ordinal297(int a1, int a2, int a3)
298    void     __cdecl   Ordinal298()
299    BOOL     __stdcall SFileAuthenticateArchiveEx(int a1, int a2, int a3, int a4, int a5, DWORD NumberOfBytesRead)
300    BOOL     __stdcall SFileOpenPathAsArchive(int a1, int a2, int a3, int a4, int a5)
301    BOOL     __cdecl   StormDestroy()
302    HMODULE  __cdecl   StormGetInstance()
303    BOOL     __stdcall StormGetOption(int type, int optval, size_t optlen)
304    BOOL     __stdcall StormSetOption(int type, int optval, size_t optlen)

311                       SBltDestroy()
312    BOOL     __stdcall SBltGetSCode(unsigned int maxiterations, char *buffer, size_t buffersize, char *loopstring)
313    BOOL     __stdcall SBltROP3(int maxiterations, int lpSurface, int width, int height, int width2, int pitch, int a7, DWORD rop)
314    BOOL     __stdcall SBltROP3Clipped(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
315    BOOL     __stdcall SBltROP3Tiled(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)

320                       SBmpInit()
321    BOOL     __stdcall SBmpDecodeImage(int type, signed int *srcbuffer, unsigned int a3, int a4, void *dstbuffer, int size, int a7, int a8, int a9)
322                       SBmpDestroy()
323    BOOL     __stdcall SBmpLoadImage(const char *fileName, int size, void *buffer, int buffersize, int width, int height, int depth)
324    BOOL     __stdcall SBmpSaveImage(const char *fileName, PALETTEENTRY *paletteentries, void *bitmapbits, unsigned __int16 width, unsigned __int16 height, int bitdepth)
325    HANDLE   __stdcall SBmpAllocLoadImage(const char *fileName, int *palette, void **buffer, int *width, int *height, int unused6, int unused7, void *(__stdcall *allocFunction)(DWORD))
326    BOOL     __stdcall SBmpSaveImageEx(const char *fileName, PALETTEENTRY *paletteentries, void *bitmapbits, unsigned __int16 width, unsigned __int16 height, int bitdepth, int bufferSize)

330                       SCodeInit()
331    BOOL     __stdcall SCodeCompile(char *directives1, char *directives2, char *loopstring, unsigned int maxiterations, unsigned int flags, HANDLE handle)
332    BOOL     __stdcall SCodeDelete(HANDLE handle)
333                       SCodeDestroy()
334    int      __cdecl   SCodeExecute(HANDLE handle, int a2)
335    BOOL     __stdcall SCodeGetPseudocode(int scodestring, int buffer, size_t buffersize)

340                       SDrawInit()
341    BOOL     __stdcall SDrawAutoInitialize(HINSTANCE hInst, LPCSTR lpClassName, LPCSTR lpWindowName, LRESULT (WINAPI *pfnWndProc)(HWND, UINT, WPARAM, LPARAM), int nMode, int nWidth, int nHeight, int nBits)
342    BOOL     __stdcall SDrawCaptureScreen(char *source)
343    BOOL     __stdcall SDrawClearSurface(int surfacenumber)
344    BOOL     __cdecl   SDrawDestroy()
345    BOOL     __cdecl   SDrawFlipPage()
346    HWND     __stdcall SDrawGetFrameWindow(HWND sdraw_framewindow)
347    BOOL     __stdcall SDrawGetObjects(LPDIRECTDRAW ddInterface, LPDIRECTDRAWSURFACE primarySurface, LPDIRECTDRAWSURFACE surface2, LPDIRECTDRAWSURFACE surface3, LPDIRECTDRAWSURFACE backSurface, LPDIRECTDRAWPALETTE ddPalette, HPALETTE hPalette);
348    BOOL     __stdcall SDrawGetScreenSize(int width, int height, int depth)
349    BOOL     __stdcall SDrawGetServiceLevel(int a1)
350    BOOL     __stdcall SDrawLockSurface(int surfacenumber, RECT *lpDestRect, void **lplpSurface, int *lpPitch, int arg_unused)
351    BOOL     __stdcall SDrawManualInitialize(HWND hWnd, IDirectDraw *ddInterface, IDirectDrawSurface *primarySurface, int a4, int a5, IDirectDrawSurface *backSurface, IDirectDrawPalette *palette, int a8)
352    DWORD    __stdcall SDrawMessageBox(LPCSTR lpText, LPCSTR lpCaption, UINT uType)
353    BOOL     __cdecl   SDrawPostClose()
354    BOOL     __cdecl   SDrawRealizePalette()
355    BOOL     __stdcall SDrawSelectGdiSurface(unsigned int a1, int a2)
356    BOOL     __stdcall SDrawUnlockSurface(int surfacenumber, void *lpSurface, int a3, RECT *lpRect)
357    BOOL     __stdcall SDrawUpdatePalette(unsigned int firstentry, unsigned int numentries, PALETTEENTRY *pPalEntries, int a4)
358    BOOL     __stdcall SDrawUpdateScreen(BOOL bErase)
359    int      __cdecl   SDrawWaitForVerticalBlank()

372    BOOL     __stdcall SEvtDispatch(DWORD dwMessageID, DWORD dwFlags, int type, s_evt *event)
373    BOOL     __stdcall SEvtRegisterHandler(DWORD messageID, DWORD type, int command, int class, void *callback)
374    BOOL     __stdcall SEvtUnregisterHandler(DWORD messageID, int a2, int a3, int a4)
375    BOOL     __stdcall SEvtUnregisterType(DWORD messageID, int type)
376    BOOL     __stdcall SEvtPopState(DWORD messageID, int type)
377    BOOL     __stdcall SEvtPushState(DWORD messageID, int type)
378    BOOL     __stdcall SEvtBreakHandlerChain(int a1)

380                      SGdiInit()
381    BOOL    __stdcall SGdiBitBlt(int a1, int a2, int a3, int a4, unsigned int a5, int a6, int a7, unsigned int a8, signed int a9)
382    BOOL    __stdcall SGdiCreateFont(HANDLE handle, int bits, int width, int height, int filecharwidth, int filecharheight, const void *charsizetable, int windowsfont)
383    BOOL    __stdcall SGdiDeleteObject(HANDLE handle)
384    BOOL     __cdecl  SGdiDestroy()
385    BOOL    __stdcall SGdiExtTextOut(int a1, int a2, int a3, int a4, unsigned int a8, signed int a6, signed int a7, const char *string, unsigned int arg20)
386    BOOL    __stdcall SGdiImportFont(HGDIOBJ handle, HANDLE *windowsfont)
387    BOOL    __stdcall SGdiLoadFont(char *Str, int filecharwidth, int filecharheight, int argC, int a7, int a8)
388    BOOL    __stdcall SGdiRectangle(int lpSurface, int a2, int a3, int width, int height, int a6)
389    BOOL    __stdcall SGdiSelectObject(HANDLE hObject)
390    BOOL    __stdcall SGdiSetPitch(int pitch)
391    BOOL    __stdcall SGdiTextOut(int a1, int a2, int a3, unsigned int a8, const char *string, unsigned int arg20)
392    BOOL    __stdcall SGdi392(int width, int height, int depth, int width2)        // SGdiGetTextExtent?
393    BOOL    __stdcall Ordinal393(char *string, int, int)

399    BOOL    __stdcall SMem399(int a1, int a2, int a3, void *a4, unsigned int a5) // calls to SMemDumpStateEx and SMemMarkAllHeapsEx
400                      SMemInit()
401    void*   __stdcall SMemAlloc(int amount, char *logfilename, int logline, int defaultValue)
402    BOOL    __cdecl   SMemDestroy()
403    BOOL    __stdcall SMemFree(void *location, char *logfilename, int logline, char defaultValue)
404    int     __stdcall SMemGetSize(void *location, char *logfilename, int logline)
405    void*   __stdcall SMemReAlloc(void *location, int amount, char *logfilename, int logline, int defaultValue)
406    int     __stdcall Storm406(int a1, int a2, int a3)   // WC3

412    BOOL    __stdcall SMsgDispatchMessage(HWND hWnd, DWORD messageID, WPARAM wParam, LPARAM lParam, int a5, int a6)
413    WPARAM  __stdcall SMsgDoMessageLoop(void *callback, int followWithStormDestroy)
414    BOOL    __stdcall SMsgRegisterCommand(int a1, int event, int a3)     // SMSH
415    BOOL    __stdcall SMsgRegisterKeyDown(int a1, int event, int a3)     // SMSJ
416    BOOL    __stdcall SMsgRegisterKeyUp(int a1, int event, int a3)     // SMSK
417    BOOL    __stdcall SMsgRegisterMessage(int a1, int event, int a3)     // SMSG
418    BOOL    __stdcall SMsgPopRegisterState(int type)
419    BOOL    __stdcall SMsgPushRegisterState(int type)
420    BOOL    __stdcall SMsg420(int a1, int a2, int a3)     // Register SMSI
421    BOOL    __stdcall SRegLoadData(char *keyname, char *valuename, BYTE flags, LPBYTE lpData, int size, LPDWORD lpcbData)
422    BOOL    __stdcall SRegLoadString(char *keyname, char *valuename, BYTE flags, char *buffer, size_t buffersize)
423    BOOL    __stdcall SRegLoadValue(char *keyname, char *valuename, BYTE flags, int *value)
424    BOOL    __stdcall SRegSaveData(char *keyname, char *valuename, int size, BYTE *lpData, DWORD cbData)
425    BOOL    __stdcall SRegSaveString(char *keyname, char *valuename, BYTE flags, char *string)
426    BOOL    __stdcall SRegSaveValue(char *keyname, char *valuename, BYTE flags, DWORD result)
427    BOOL    __stdcall SRegGetBaseKey(BYTE flags, char *buffer, size_t bufferchars)
428    BOOL    __stdcall SRegDeleteValue(char *keyname, char *valuename, BYTE flags)
429    BOOL    __stdcall SReg429(char *keyname, DWORD dwflags, DWORD dwIndex, char *, size_t)
430    BOOL    __stdcall SReg430(char *keyname, int a2, DWORD cSubKeys)
431    BOOL    __stdcall STransBlt(int handle, int a2, int a3, int a4, int a5)
432    BOOL    __stdcall STransBltUsingMask(int lpSurface, int a2, int pitch, int width, int handle)
433    BOOL    __stdcall STransCreateI(int handle, int a2, int a3, signed int a4, int a5, int a6, int a7)
434    BOOL    __stdcall STransDelete(int handle)
435                      STransDestroy()
436    BOOL    __stdcall STransDuplicate(int handle, int source)
437    BOOL    __stdcall STransIntersectDirtyArray(int handle, int dirtyarraymask, unsigned __int8 dirtyarray, int sourcemask)
438    BOOL    __stdcall STransInvertMask(int handle, int sourcemask)
439    BOOL    __stdcall STransLoadI(char *filename, int a2, int a3, int handle)
440    BOOL    __stdcall STransSetDirtyArrayInfo(int width, int height, int depth, int bits)
441    BOOL    __stdcall STransUpdateDirtyArray(int a1, char a2, int a3, int a4, int a5, int a6) // dirtyarray, dirtyvalue, transparency
442    BOOL    __stdcall STrans442(int a1, int a2, int a3, char *a4, size_t a5)       // STransIsPixelInMask? STransGetBoundingRect?
443    BOOL    __stdcall STransCombineMasks(int handle, int a2, int a3, int a4, int depth, int a6)
444    BOOL    __stdcall STransCreateI(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
445    BOOL    __stdcall STransCreateE(int a1, int a2, int a3, int bpp, int a5, int bufferSize, int a7)
446    BOOL    __stdcall STrans446(int a1, int a2, int a3, int a4, int a5, int a6, int a7)       // STransIsPixelInMask? STransGetBoundingRect?
447    BOOL    __stdcall STransLoadE(char *filename, int a2, int a3, int handle)

450                      SVidInit()
451    BOOL    __cdecl   SVidDestroy()
452    BOOL    __stdcall SVidGetSize(HANDLE video, int width, int height, int zero)
453    BOOL    __stdcall SVidInitialize(HANDLE video)
454    BOOL    __stdcall SVidPlayBegin(char *filename, int arg4, int a3, int a4, int a5, int a6, HANDLE video)
455    BOOL    __stdcall SVidPlayBeginFromMemory(void *destbuffer, int destsize, int arg4, int a3, int a4, int a6, int sourcebytes, int sourceptr) // flags, paletteuse
456    BOOL    __cdecl   SVidPlayContinue()
457    BOOL    __stdcall SVidPlayContinueSingle(HANDLE video, int a2, int a3)
458    BOOL    __stdcall SVidPlayEnd(HANDLE video)
459    BOOL    __stdcall SVidSetVolume(HANDLE video, int a2, int a3, int type)
460    int     __stdcall Storm460(int a1) // WC3
461    BOOL    __stdcall SErrDisplayError(DWORD dwErrCode, char *logfile, int logline, int location, int exitCode, UINT uExitCode)
462    BOOL    __stdcall SErrGetErrorStr(DWORD dwErrCode, char *buffer, size_t bufferchars)
463    DWORD   __cdecl   SErrGetLastError()
464    BOOL    __stdcall SErrRegisterMessageSource(__int16 a1, int a2, int a3)
465    void    __stdcall SErrSetLastError(DWORD dwErrCode)
466    void    __stdcall SErrReportNamedResourceLeak(char *resourceName, int a2)
467    void    __stdcall SErrReportResourceLeak(char *resourceName)
468    void    __stdcall SErrSuppressErrors(bool suppressErrors)
469    void    __stdcall SErrRegisterHandler(int a1)
470    void    __stdcall SErrUnregisterHandler(int a1)
471    unsigned int __stdcall Storm471(void *a1, unsigned int a2, int a3)   // WC3
472    BOOL    __stdcall SCmdGetBool(int argnum)
473    int     __stdcall SCmdGetNum(int argnum)
474    BOOL    __stdcall SCmdGetString(int argnum, char* dest, size_t size)
475    BOOL    __stdcall SCmdProcess(const char **string, int a2, int a3, int a4)
476    BOOL    __stdcall SCmdRegisterArgList(void *argstruct, int count)
477    BOOL    __stdcall SCmdRegisterArgument(int a1, int a2, char *str, int a4, int a5, int a6, int a7, int a8)
478    int     __stdcall SCmdStringExists(int argnum)
479    BOOL    __stdcall SCmdProcessCommandLine(int count, void *function)
480    BOOL    __stdcall SCmd480(int a1, int a2)   // WC3
481    BOOL    __stdcall SMemFindNextBlock(int a1, int a2, int a3, int a4)
482    BOOL    __stdcall SMemFindNextHeap(int prevheap, int details, int nextheap)
483    int     __stdcall SMemGetHeapByCaller(int a1, int a2)
484    int     __stdcall SMemGetHeapByPtr(int a1)
485    int     __stdcall SMemHeapAlloc(int a1, int a2, int a3)
486    int     __stdcall SMemHeapCreate(int a1, int a2, int a3, char a4, DWORD ExitCode)
487    BOOL    __stdcall SMemHeapDestroy(int a1)
488    BOOL    __stdcall SMemHeapFree(int a1, int a2, void *a3)
489    int     __stdcall SMemHeapRealloc(int a1, int a2, void *a3, int a4)
490    int     __stdcall SMemHeapSize(int a1, int a2, void *a3)
491    void    __stdcall SMemCopy(void *dest, const void *source, size_t size)
492    int     __stdcall SMemFill(void *location, size_t length, char fillWith)
493    int     __stdcall SMemMove(void *dest, void *source, size_t size)
494    int     __stdcall SMemZero(void *location, size_t length)
495    int     __stdcall SMemCmp(void *location1, void *location2, size_t size)
496    int     __stdcall SMem496(unsigned int a1, char a2)             // either SMemGetAllocated or SMemSetDebugFlags
497    BOOL    __stdcall SMemDumpState(int (__stdcall *a1)(_DWORD, _DWORD), int a2)
498    void    __cdecl   Ordinal498()

500                      SStrInit()
501    int     __stdcall SStrCopy(char *dest, const char *source, size_t size)
502    DWORD   __stdcall SStrHash(const char *string, DWORD flags, DWORD Seed)
503    int     __stdcall SStrNCat(char *base, char *new, int max_length)
504    void    __stdcall SStrTokenize(const char **string, char *(*string), char *buffer, const char *whitespace, size_t size)
505    char*   __stdcall SStrPack(const char *string, char c, int type)
506    int     __stdcall SStrLen(const char* string)
507    char*   __stdcall SStrDup(const char* string)
508    int     __stdcall SStrCmp(const char *string1, const char *string2, size_t size)
509    int     __stdcall SStrCmpI(const char *string1, const char *string2, size_t size)
510    char*   __stdcall SStrUpper(char* string)
511    BOOL    __stdcall SMsgBreakHandlerChain(int a1)
512    BOOL    __stdcall SMsgUnregisterCommand(int a1, int a2, int a3)     // SMSH
513    BOOL    __stdcall SMsgUnregisterKeyDown(int a1, int a2, int a3)     // SMSJ
514    BOOL    __stdcall SMsgUnregisterKeyUp(int a1, int a2, int a3)     // SMSK
515    BOOL    __stdcall SMsgUnregisterMessage(int a1, int a2, int a3)     // SMSG
516    int     __stdcall SMsg516(int a1)                 // calls 412.. WC3 does weird stuff here
517    BOOL    __stdcall SMsgSetDefaultWindow(HWND window)
518    HWND    __cdecl   SMsgGetDefaultWindow()
519    BOOL    __stdcall SMsg519(int a1, int a2, int a3)         // Unregister SMSI

521    void    __stdcall Ordinal521(int a1)

523    void    __stdcall SRgn523(int handle, RECT *rect, int reserved, int a4)
524    void    __stdcall SRgnCreate(int handle, int reserved)
525    void    __stdcall SRgnDelete(int handle)

527    void    __stdcall SRgn527(int handle, int a2, int a3)
528    void    __stdcall SRgn528i(int handle, int a2, int a3, int a4)  // 534
529    void    __stdcall SRgn529i(int handle, int a2, int a3) // 536
530    void    __stdcall SRgn530i(int handle, int a2) // 537
531    BOOL    __stdcall SRgn531i(int handle, int a2, int a3) //538
532    BOOL    __stdcall SRgn532i(int handle, int a2) // 539
533    void    __stdcall SRgn533i(int handle, int a2, int a3) // 540
534    void    __stdcall SRgn534(int handle, int a2, int a3, int a4)
535    void    __stdcall SRgn535f(int handle, float a2, float a3, float a4)
536    void    __stdcall SRgn536f(int handle, float a2, float a3)
537    void    __stdcall SRgn537f(int handle, float a2)
538    BOOL    __stdcall SRgn538f(int handle, float a2, float a3)
539    BOOL    __stdcall SRgn539f(int handle, float a2)
540    void    __stdcall SRgn540f(int handle, float a2, float a3)
541    void    __stdcall SLogClose(DWORD NumberOfBytesWritten)
542    HANDLE  __stdcall SLogCreate(char *filename, int a2, int a3)
543    void    __stdcall SLog543(int a1, int a2)
544    void    __stdcall SLogDump(int a1, int a2, DWORD NumberOfBytesWritten)
545    void    __stdcall SLogFlush(DWORD NumberOfBytesWritten)
546    void    __cdecl   SLogFlushAll()
547    void    __cdecl   SLogPend(int a1, char *a2, char a3)
548    void    __cdecl   SLogWrite(HANDLE handle, char *format, ...)
549    void    __stdcall SLog549(int a1, int a2)
550    void    __stdcall SLogCriticalLog(HANDLE handle, int a2)  // unofficial name
551    BOOL    __stdcall SCompCompress(void *a1, int a2, unsigned int a3, signed int amount, int a5, char a6, int a7)
552    BOOL    __stdcall SCompDecompress(void *a1, int *a2, const void *a3, unsigned int a4)
553    void    __cdecl   SLogVWrite(HANDLE handle, char *format, ...)
554    void    __stdcall Ordinal554(int a1, int a2)
555    void    __stdcall Ordinal555(int a1, int a2)
556    void    __stdcall Ordinal556(int a1, int a2)
557    void    __stdcall Ordinal557(int a1, int a2, int a3, int a4, int a5)
558    void    __stdcall Ordinal558(int a1, int a2)
559    void    __cdecl   Ordinal559()
560    void    __cdecl   Ordinal560()
561    void    __cdecl   SErrCheckDebugSymbolLibrary(char *, char)
562    BOOL    __cdecl   SErrDisplayErrorFmt(DWORD dwMessageId, char *logfile, int logline, int unk, UINT uExitCode, char *format, ...)
563    int     __cdecl   SErrIsDisplayingError()
564    void    __stdcall SErrPrepareAppFatal(int a1, int a2)
565    void    __cdecl   SErrSetLogTitleString(char* title)
566    BOOL    __stdcall SErrDisplayAppFatal(int a1)
567    LPTOP_LEVEL_EXCEPTION_FILTER   __cdecl   SErrCatchUnhandledExceptions()
568    void         __cdecl   Storm568(struct _RTL_CRITICAL_SECTION *a1)    // WC3
569    char *       __stdcall SStrChr(char *string, char c)
570    char *       __stdcall SStrChrR(char *string, char c)
571    char *       __stdcall SStrChr(const char *string, char c)
572    char *       __stdcall SStrChrR(const char *string, char c)
573    double       __stdcall SStrToDouble(const char *string)
574    float        __stdcall SStrToFloat(const char *string)
575    signed int   __stdcall SStrToInt(const char *string)
576    unsigned int __stdcall SStrToUnsigned(const char *string)
577    __int64      __stdcall SStrToInt64(const char *string)
578    size_t       __cdecl   SStrVPrintf(char *dest, size_t size, const char *format, ...)
579    char*        __stdcall SStrLower(char* string)
580    int          __stdcall SStrHash64(int a1, int a2, int a3, int a4)     //  or SStrHashHT??
581    int          __cdecl   SStrPrintf(char *dest, size_t size, const char *format, ...)
582    void         __stdcall SStr582(int a1)
583    BOOL         __stdcall Ordinal583(LPRECT lpRect)
584    int          __stdcall SStrStrI(char *string, const char *search)
585    int          __stdcall SStrStrI(const char *string, const char *search)
586    int          __stdcall SStrStr(char *string, const char *search)
587    int          __stdcall SStrStr(const char *string, const char *search)
588    int          __stdcall SNet588(char *a1, char *a2)    // league related?
589
590
595
596
597

600                       SBigInit()
601    int      __stdcall SBigAdd(void *buffer, const void *buffer2, const void *buffer3)
602    int      __stdcall SBigAnd(void *buffer, const void *buffer2, const void *buffer3)
603    int      __stdcall SBigCompare(void *buffer, void *buffer2)
604    int      __stdcall SBigCopy(void *buffer, void *buffer2)
605    int      __stdcall SBigDec(void *buffer, const void *buffer2)
606    int      __stdcall SBigDel(void *buffer)
607    int      __stdcall SBigDiv(int a1, const void *buffer1, const void *buffer2)
608    int      __stdcall SBigFindPrime(int a1, void *a2, unsigned int a3, const void *a4)
609    int      __stdcall SBigFromBinary(void *buffer, const void *str, size_t size)
610    int      __stdcall SBigFromStr(void *buffer, int a2)
611    int      __stdcall SBigFromStream(void *buffer, int a2, int a3, int a4)
612    int      __stdcall SBigFromUnsigned(void *buffer, unsigned int value)
613    int      __stdcall SBigGcd(void *buffer, int a2, int a3)
614    int      __stdcall SBigInc(void *buffer, int a2)
615    int      __stdcall SBigInvMod(void *buffer, int a2, int a3)
616    int      __stdcall SBigIsEven(void *buffer)
617    int      __stdcall SBigIsOdd(void *buffer)
618    int      __stdcall SBigIsOne(void *buffer)
619    int      __stdcall SBigIsPrime(void *buffer)
620    int      __stdcall SBigIsZero(void *buffer)
621    int      __stdcall SBigMod(void *buffer, int a2, int a3)
622    int      __stdcall SBigMul(void *buffer, int a2, int a3)
623    int      __stdcall SBigMulMod(void *buffer, int a2, int a3, int a4)
624    int      __stdcall SBigNew(void **buffer)
625    int      __stdcall SBigNot(void *buffer, int a2)
626    int      __stdcall SBigOr(void *buffer, int a2, int a3)
627    int      __stdcall SBigPow(void *buffer, int a2, int a3)
628    int      __stdcall SBigPowMod(void *buffer1, void *buffer2, int a3, int a4)
629    int      __stdcall SBigRand(void *buffer, int a2, int a3)
630    int      __stdcall SBigSet2Exp(void *buffer, int a2)
631    int      __stdcall SBigSetOne(void *buffer)
632    int      __stdcall SBigSetZero(void *buffer)
633    int      __stdcall SBigShl(void *buffer, int a2, int a3)
634    int      __stdcall SBigShr(void *buffer, int a2, int a3)
635    int      __stdcall SBigSquare(void *buffer, int a2)
636    int      __stdcall SBigSub(void *buffer, int a2, int a3)
637    int      __stdcall SBigToBinaryArray(void *buffer, int length, int a3)
638    int      __stdcall SBigToBinaryBuffer(void *buffer, int length, int a3, int a4)
639    int      __stdcall SBigToBinaryPtr(void *buffer, int a2, int a3)
640    int      __stdcall SBigToStrArray(void *buffer, int a2, int a3)
641    int      __stdcall SBigToStrBuffer(void *buffer, char *dst, int count)
642    int      __stdcall SBigToStrPtr(void *buffer, int a2)
643    int      __stdcall SBigToStreamArray(void *buffer, int a2, int a3)
644    int      __stdcall SBigToStreamBuffer(void *buffer, int a2, int a3, int a4)
645    int      __stdcall SBigToStreamPtr(void *buffer, int a2, int a3)
646    int      __stdcall SBigToUnsigned(void *buffer, int a2)
647    int      __stdcall SBigXor(void *buffer, int a2, int a3)
648	                      SSignatureVerify(int a1, int a2, int a3, int a4)
649	                      SSignatureVerifyStream_Begin(int a1)
650	                      SSignatureVerifyStream_ProvideData(int a1)
651	                      SSignatureVerifyStream_Finish(int a1)
652	                      SSignatureGenerate(int a1, int a2, int a3, int a4, int a5, int a6)
653	                      SSignatureVerifyStream_GetSignatureLength()

900                       SUniInit()
901    int      __stdcall SUniConvertUTF16to8Len(int a1, int a2, int a3)
902    int      __stdcall SUniConvertUTF16to8(int a1, int mask1, int a3, int mask2, int a5, int a6)
903    int      __stdcall SUniConvertUTF8to16Len(int a1, int a2, int a3)
904    int      __stdcall SUniConvertUTF8to16(int a1, int a2, int a3, int a4, int a5, int a6)
905    int      __stdcall SUniS905(int a1, int a2)      // SUniSPutUTF8 or SUniSGetUTF8
906    int      __stdcall SUniS906(int a1, int a2)      // SUniSPutUTF8 or SUniSGetUTF8
907    int      __stdcall SUniFindAfterUTF8Chr(int a1, int a2)
908    int      __stdcall SUniFindUTF8ChrStart(int a1, int a2)
909    int      __stdcall SUniConvertUTF16To909(unsigned __int32 a1, char *a2, unsigned __int16 *a3)    // SUniConvertUTF16ToDos, SUniConvertUTF16ToMac, or SUniConvertUTF16ToWin
910    int      __stdcall SUniConvertUTF16To910(unsigned __int32 a1, char *a2, unsigned __int16 *a3)    // SUniConvertUTF16ToDos, SUniConvertUTF16ToMac, or SUniConvertUTF16ToWin
911    int      __stdcall SUniConvertUTF16To911(unsigned __int32 a1, char *a2, unsigned __int16 *a3)    // SUniConvertUTF16ToDos, SUniConvertUTF16ToMac, or SUniConvertUTF16ToWin
912    int      __stdcall SUniConvert912(int a1, int a2, int a3)        // SUniConvertDosToUTF16, SUniConvertMacToUTF16, or SUniConvertWinToUTF16
913    int      __stdcall SUniConvert913(int a1, int a2, int a3)        // SUniConvertDosToUTF16, SUniConvertMacToUTF16, or SUniConvertWinToUTF16
914    int      __stdcall SUniConvert914(int a1, int a2, int a3)        // SUniConvertDosToUTF16, SUniConvertMacToUTF16, or SUniConvertWinToUTF16
915    int      __stdcall SUniConvertUTF8ToWin(unsigned __int32 a1, char *a2, unsigned __int16 *a3)
}}}

Values for the logline parameter:
{{{
0   = Expression
-1  = Function
-2  = Object
-3  = Handle
-4  = File

Else it's a project File + line number pair.
}}}

Values for SNetLeaveGame:
{{{
1 = Fail to join game
2 = Fail to create game
3 = Leave, Disconnect, Destroy
}}}

Values for Registry Flags:
{{{
0 = "Software\\Battle.net\\"
2 = "Software\\Blizzard Entertainment\\"
}}}

Values for SNet player flags
{{{
40000006 = Drop
}}}

values for modeFlags of SNetSetGameMode
{{{
0x00000001 = Game is private
0x00000002 = Game is full
0x00000004 = Game is active
0x00000008 = Game has started
0x00000080 = Game is replay
}}}

values for SNetGetGameInfo type
{{{
1 = Game Name
2 = Game Password
3 = Full Game Stat String (see http://www.bnetdocs.org/?op=doc&did=13)
4 = Game Mode
}}}

player Struct
{{{
struct playerStruct
{
    playerStruct *prev;   // +0x00
    playerStruct *next;   // +0x04
    char playerName[128]; // +0x08
    char statString[128]; // +0x88
    WORD addr_family;     // +0x108
    WORD port;            // +0x10A
    DWORD ipAddress;      // +0x10C
    u32 ping;             // +0x110
    void *newMessagePointer;  // +0x114
    DWORD dwFlags;        // +0x118  // 0x04 = unknown, 0x08 = dropped
    u32 unknown_0x11C;    // +0x11C
    u32 tickCount;        // +0x120
    u32 playerBuffer;     // +0x124
    int Ping;             // +0x128
    BYTE unknown_0x12C[12];  // +0x12C
    u32 unknown_0x138;    // +0x138
    BYTE unknown_0x13C[68];  // +0x13C
    u32 unknown_0x180;    // +0x180
    BYTE unknown_0x184[68]; // +0x184
    u32 unknown_0x1C8;    // +0x1C8
    WORD sentMessageNumber[3];// +0x1CC
    WORD unknown_0x1D2[3];// +0x1D2
    u32 unknown_0x1D8;    // +0x1D8 // ref'd by SNetDropPlayer
    WORD unknown7;        // +0x1DC
    WORD recvMessageNumber[3]; // +0x1DE
    BYTE unknown[40];     // +0x1E4
    u16 dropReason;       // +0x20C      // Just a guess
    u16 droppedBy;        // +0x210       // Just a guess
    BYTE PlayerID;        // +0x212
                          // +0x213
                          // +0x214
}

}}}

caps
{{{
struct caps
{
  u32 size;
  u32 unk4;
  u32 unk8;
  u32 unkC;
  u32 unk10;
  u32 unk14;
  u32 ping;
  u32 unk1C;
  u32 latencyCalls;
}

}}}

struct argstruct
{
  DWORD   flags;
  int     index;
  char* name;
  (bool (__stdcall*)(int,int)) function;
}
